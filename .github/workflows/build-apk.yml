name: Build and Sign Release APK

on:
push:
branches:
- main

permissions:
contents: read

env:
API_LEVEL: "34"
BUILD_TOOLS: "34.0.0"
OUTPUT_DIR: "app/build/outputs/apk/release"
DEFAULT_KEYSTORE_ALIAS: "lostmodekey"
DEFAULT_KEYSTORE_PASS: "android"
DEFAULT_KEY_PASS: "android"

jobs:
build:
runs-on: ubuntu-latest

steps:  
  # 1. Checkout repository  
  - name: Checkout repository  
    uses: actions/checkout@v3  

  # 2. Set up JDK 17  
  - name: Set up JDK  
    uses: actions/setup-java@v3  
    with:  
      distribution: temurin  
      java-version: 17  

  # 3. Set up Android SDK  
  - name: Setup Android SDK  
    uses: android-actions/setup-android@v3  
    with:  
      cmdline-tools-version: 12266719  
      accept-android-sdk-licenses: true  
      log-accepted-android-sdk-licenses: true  
      packages: platform-tools tools  

  # 4. Force accept any remaining licenses (fail-safe)  
  - name: Force Accept Remaining SDK Licenses  
    run: |  
      yes | $ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager --licenses || true  

  # 5. Install required SDK components  
  - name: Install SDK components  
    run: |  
      set -e  
      yes | sdkmanager --install \  
        "platforms;android-${API_LEVEL}" \  
        "build-tools;${BUILD_TOOLS}" \  
        "platform-tools"  

  # 6. Create local.properties with ARIA_API_KEY  
  - name: Create local.properties  
    run: |  
      echo "sdk.dir=$ANDROID_SDK_ROOT" > local.properties  
      echo "ARIA_API_KEY=${{ secrets.ARIA_API_KEY }}" >> local.properties  
      echo "Created local.properties with ARIA_API_KEY"  

  # 7. Make Gradle wrapper executable  
  - name: Make Gradle wrapper executable  
    run: chmod +x ./gradlew  

  # 8. Build release APK  
  - name: Build release APK  
    run: ./gradlew clean assembleRelease --no-daemon  

  # 9. Locate unsigned APK  
  - name: Locate unsigned APK  
    run: |  
      set -e  
      OUTPUT="${GITHUB_WORKSPACE}/${OUTPUT_DIR}"  
      APK_UNSIGNED=$(find "$OUTPUT" -type f -name '*-unsigned.apk' -print | head -n 1 || true)  
      if [ -z "$APK_UNSIGNED" ]; then  
        APK_UNSIGNED=$(find "$OUTPUT" -type f -name '*.apk' -print | head -n 1 || true)  
      fi  
      if [ -z "$APK_UNSIGNED" ]; then  
        echo "ERROR: No APK found in $OUTPUT"  
        ls -R "$OUTPUT" || true  
        exit 1  
      fi  
      echo "Located unsigned APK: $APK_UNSIGNED"  
      echo "APK_UNSIGNED=$APK_UNSIGNED" >> $GITHUB_ENV  

  # 10. Setup keystore (decode secret or generate debug)  
  - name: Setup keystore  
    run: |  
      set -e  
      if [ -n "${{ secrets.KEYSTORE_BASE64 }}" ]; then  
        echo "${{ secrets.KEYSTORE_BASE64 }}" | base64 --decode > keystore.jks  
        KEYSTORE_PATH=keystore.jks  
        KEYSTORE_ALIAS="${{ secrets.KEYSTORE_ALIAS }}"  
        KEYSTORE_PASSWORD="${{ secrets.KEYSTORE_PASSWORD }}"  
        KEY_PASSWORD="${{ secrets.KEY_PASSWORD }}"  
      else  
        KEYSTORE_PATH=debug.keystore  
        keytool -genkey -v \  
          -keystore "$KEYSTORE_PATH" \  
          -alias "${{ env.DEFAULT_KEYSTORE_ALIAS }}" \  
          -keyalg RSA \  
          -keysize 2048 \  
          -validity 10000 \  
          -storepass "${{ env.DEFAULT_KEYSTORE_PASS }}" \  
          -keypass "${{ env.DEFAULT_KEY_PASS }}" \  
          -dname "CN=LostMode, OU=Dev, O=LostMode, L=City, ST=State, C=US"  
        KEYSTORE_ALIAS="${{ env.DEFAULT_KEYSTORE_ALIAS }}"  
        KEYSTORE_PASSWORD="${{ env.DEFAULT_KEYSTORE_PASS }}"  
        KEY_PASSWORD="${{ env.DEFAULT_KEY_PASS }}"  
      fi  
      echo "KEYSTORE_PATH=$KEYSTORE_PATH" >> $GITHUB_ENV  
      echo "KEYSTORE_ALIAS=$KEYSTORE_ALIAS" >> $GITHUB_ENV  
      echo "KEYSTORE_PASSWORD=$KEYSTORE_PASSWORD" >> $GITHUB_ENV  
      echo "KEY_PASSWORD=$KEY_PASSWORD" >> $GITHUB_ENV  

  # 11. Sign APK  
  - name: Sign APK  
    run: |  
      set -e  
      BUILD_TOOLS_DIR="$ANDROID_SDK_ROOT/build-tools/${BUILD_TOOLS}"  
      OUT_SIGNED="$GITHUB_WORKSPACE/${OUTPUT_DIR}/app-release-signed.apk"  
      "$BUILD_TOOLS_DIR/apksigner" sign \  
        --ks "$KEYSTORE_PATH" \  
        --ks-key-alias "$KEYSTORE_ALIAS" \  
        --ks-pass pass:$KEYSTORE_PASSWORD \  
        --key-pass pass:$KEY_PASSWORD \  
        --out "$OUT_SIGNED" \  
        "$APK_UNSIGNED"  
      echo "SIGNED_APK_PATH=$OUT_SIGNED" >> $GITHUB_ENV  

  # 12. Align APK  
  - name: Align APK  
    run: |  
      set -e  
      BUILD_TOOLS_DIR="$ANDROID_SDK_ROOT/build-tools/${BUILD_TOOLS}"  
      IN_APK="$GITHUB_WORKSPACE/${OUTPUT_DIR}/app-release-signed.apk"  
      OUT_ALIGNED="$GITHUB_WORKSPACE/${OUTPUT_DIR}/app-release-aligned.apk"  
      "$BUILD_TOOLS_DIR/zipalign" -v 4 "$IN_APK" "$OUT_ALIGNED"  
      echo "ALIGNED_APK_PATH=$OUT_ALIGNED" >> $GITHUB_ENV  

  # 13. Verify APK  
  - name: Verify APK  
    run: |  
      BUILD_TOOLS_DIR="$ANDROID_SDK_ROOT/build-tools/${BUILD_TOOLS}"  
      "$BUILD_TOOLS_DIR/apksigner" verify "$GITHUB_WORKSPACE/${OUTPUT_DIR}/app-release-aligned.apk" || true  

  # 14. Upload final APK artifact  
  - name: Upload APK  
    uses: actions/upload-artifact@v4  
    with:  
      name: LostModeClient-APK  
      path: ${{ github.workspace }}/${{ env.OUTPUT_DIR }}/app-release-aligned.apk

