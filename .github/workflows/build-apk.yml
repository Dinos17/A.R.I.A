name: Build and Sign Release APK

on:
  push:
    branches:
      - main

permissions:
  contents: read

env:
  API_LEVEL: "34"
  BUILD_TOOLS: "34.0.0"
  OUTPUT_DIR: "app/build/outputs/apk/release"
  DEFAULT_KEYSTORE_ALIAS: "lostmodekey"
  DEFAULT_KEYSTORE_PASS: "android"
  DEFAULT_KEY_PASS: "android"

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: 17

      - name: Install Android SDK bootstrap
        uses: android-actions/setup-android@v3

      - name: Install SDK components (platforms, build-tools, platform-tools)
        run: |
          set -e
          # find sdkmanager
          if command -v sdkmanager >/dev/null 2>&1; then
            SDKMANAGER_CMD="sdkmanager"
          elif [ -x "$ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager" ]; then
            SDKMANAGER_CMD="$ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager"
          elif [ -x "$ANDROID_SDK_ROOT/cmdline-tools/bin/sdkmanager" ]; then
            SDKMANAGER_CMD="$ANDROID_SDK_ROOT/cmdline-tools/bin/sdkmanager"
          else
            echo "sdkmanager not found; listing SDK root:"
            ls -la "$ANDROID_SDK_ROOT" || true
            exit 1
          fi
          echo "Using $SDKMANAGER_CMD"
          yes | $SDKMANAGER_CMD --sdk_root="$ANDROID_SDK_ROOT" "platforms;android-${API_LEVEL}" "build-tools;${BUILD_TOOLS}" "platform-tools"
          yes | $SDKMANAGER_CMD --sdk_root="$ANDROID_SDK_ROOT" --licenses || true

      - name: Inject ARIA_API_KEY into local.properties (if secret present)
        if: ${{ secrets.ARIA_API_KEY != '' }}
        run: |
          echo "sdk.dir=$ANDROID_SDK_ROOT" > local.properties
          echo "ARIA_API_KEY=${{ secrets.ARIA_API_KEY }}" >> local.properties
          echo "Wrote local.properties"

      - name: Make Gradle Wrapper executable
        run: chmod +x ./gradlew

      - name: Build Release APK
        run: ./gradlew clean assembleRelease --no-daemon

      - name: Locate unsigned APK
        id: locate-apk
        run: |
          OUTPUT="${GITHUB_WORKSPACE}/${OUTPUT_DIR}"
          APK_UNSIGNED=$(find "$OUTPUT" -type f -name '*-unsigned.apk' -print | head -n 1 || true)
          if [ -z "$APK_UNSIGNED" ]; then
            APK_UNSIGNED=$(find "$OUTPUT" -type f -name '*.apk' -print | head -n 1 || true)
          fi
          if [ -z "$APK_UNSIGNED" ]; then
            echo "ERROR: No APK found in $OUTPUT"
            ls -R "$OUTPUT" || true
            exit 1
          fi
          echo "APK_UNSIGNED=$APK_UNSIGNED" >> $GITHUB_ENV
          echo "Located unsigned APK: $APK_UNSIGNED"

      - name: Decode production keystore (if provided)
        if: ${{ secrets.KEYSTORE_BASE64 != '' }}
        env:
          KEYSTORE_PATH: ${{ github.workspace }}/keystore.jks
        run: |
          echo "${{ secrets.KEYSTORE_BASE64 }}" | base64 --decode > "$KEYSTORE_PATH"
          echo "KEYSTORE_PATH=$KEYSTORE_PATH" >> $GITHUB_ENV
          echo "KEYSTORE_ALIAS=${{ secrets.KEYSTORE_ALIAS }}" >> $GITHUB_ENV
          echo "KEYSTORE_PASSWORD=${{ secrets.KEYSTORE_PASSWORD }}" >> $GITHUB_ENV
          echo "KEY_PASSWORD=${{ secrets.KEY_PASSWORD }}" >> $GITHUB_ENV

      - name: Generate debug keystore (fallback)
        if: ${{ secrets.KEYSTORE_BASE64 == '' }}
        run: |
          KEYSTORE_PATH="${GITHUB_WORKSPACE}/debug.keystore"
          keytool -genkey -v -keystore "$KEYSTORE_PATH" -alias "${{ env.DEFAULT_KEYSTORE_ALIAS }}" -keyalg RSA -keysize 2048 -validity 10000 -storepass "${{ env.DEFAULT_KEYSTORE_PASS }}" -keypass "${{ env.DEFAULT_KEY_PASS }}" -dname "CN=LostMode, OU=Dev, O=LostMode, L=City, ST=State, C=US"
          echo "KEYSTORE_PATH=$KEYSTORE_PATH" >> $GITHUB_ENV
          echo "KEYSTORE_ALIAS=${{ env.DEFAULT_KEYSTORE_ALIAS }}" >> $GITHUB_ENV
          echo "KEYSTORE_PASSWORD=${{ env.DEFAULT_KEYSTORE_PASS }}" >> $GITHUB_ENV
          echo "KEY_PASSWORD=${{ env.DEFAULT_KEY_PASS }}" >> $GITHUB_ENV

      - name: Sign APK with apksigner
        run: |
          BUILD_TOOLS_DIR="$ANDROID_SDK_ROOT/build-tools/${BUILD_TOOLS}"
          APKSIGNER="$BUILD_TOOLS_DIR/apksigner"
          if [ ! -x "$APKSIGNER" ]; then
            echo "apksigner not found at $APKSIGNER; listing build-tools:"
            ls -la "$ANDROID_SDK_ROOT/build-tools" || true
            exit 1
          fi
          IN="$APK_UNSIGNED"
          OUT="${GITHUB_WORKSPACE}/${OUTPUT_DIR}/app-release-signed.apk"
          "$APKSIGNER" sign --ks "$KEYSTORE_PATH" --ks-key-alias "${KEYSTORE_ALIAS}" --ks-pass pass:${KEYSTORE_PASSWORD} --key-pass pass:${KEY_PASSWORD} --out "$OUT" "$IN"
          echo "SIGNED_APK_PATH=$OUT" >> $GITHUB_ENV

      - name: Zipalign APK
        run: |
          ZIPALIGN="$ANDROID_SDK_ROOT/build-tools/${BUILD_TOOLS}/zipalign"
          if [ ! -x "$ZIPALIGN" ]; then
            echo "zipalign not found at $ZIPALIGN"
            ls -la "$ANDROID_SDK_ROOT/build-tools" || true
            exit 1
          fi
          IN="${GITHUB_WORKSPACE}/${OUTPUT_DIR}/app-release-signed.apk"
          OUT="${GITHUB_WORKSPACE}/${OUTPUT_DIR}/app-release-aligned.apk"
          "$ZIPALIGN" -v 4 "$IN" "$OUT"
          echo "ALIGNED_APK_PATH=$OUT" >> $GITHUB_ENV

      - name: Upload APK artifact
        uses: actions/upload-artifact@v4
        with:
          name: LostModeClient-APK
          path: ${{ github.workspace }}/${{ env.OUTPUT_DIR }}/app-release-aligned.apk
