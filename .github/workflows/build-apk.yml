name: Build and Sign Release APK

on:
  push:
    branches:
      - main

permissions:
  contents: read

env:
  API_LEVEL: "34"
  BUILD_TOOLS: "34.0.0"
  OUTPUT_DIR: "app/build/outputs/apk/release"
  DEFAULT_KEYSTORE_ALIAS: "lostmodekey"
  DEFAULT_KEYSTORE_PASS: "android"
  DEFAULT_KEY_PASS: "android"

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # 1. Checkout repo
      - name: Checkout repository
        uses: actions/checkout@v3

      # 2. Set up JDK 17
      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: 17

      # 3. Setup Android SDK
      - name: Setup Android SDK
        uses: android-actions/setup-android@v3
        with:
          accept-android-sdk-licenses: true
          log-accepted-android-sdk-licenses: true
          cmdline-tools-version: 12266719
          packages: tools platform-tools

      # 4. Force accept any remaining licenses
      - name: Force Accept Remaining SDK Licenses
        run: |
          yes | $ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager --licenses

      # 5. Create local.properties with ARIA_API_KEY
      - name: Create local.properties
        run: |
          echo "sdk.dir=$ANDROID_SDK_ROOT" > local.properties
          echo "ARIA_API_KEY=${{ secrets.ARIA_API_KEY }}" >> local.properties

      # 6. Make Gradle wrapper executable
      - name: Make Gradle wrapper executable
        run: chmod +x ./gradlew

      # 7. Build release APK with v2/v3 signing enabled
      - name: Build release APK
        run: |
          ./gradlew clean assembleRelease -Pandroid.injected.signing.store.file=debug.keystore \
                                          -Pandroid.injected.signing.store.password=${{ env.DEFAULT_KEYSTORE_PASS }} \
                                          -Pandroid.injected.signing.key.alias=${{ env.DEFAULT_KEYSTORE_ALIAS }} \
                                          -Pandroid.injected.signing.key.password=${{ env.DEFAULT_KEY_PASS }}

      # 8. Locate unsigned APK
      - name: Locate unsigned APK
        run: |
          OUTPUT="${GITHUB_WORKSPACE}/${OUTPUT_DIR}"
          APK_UNSIGNED=$(find "$OUTPUT" -type f -name '*-release-unsigned.apk' -print | head -n 1 || true)
          if [ -z "$APK_UNSIGNED" ]; then
            APK_UNSIGNED=$(find "$OUTPUT" -type f -name '*.apk' -print | head -n 1 || true)
          fi
          if [ -z "$APK_UNSIGNED" ]; then
            echo "ERROR: No APK found in $OUTPUT"
            exit 1
          fi
          echo "APK_UNSIGNED=$APK_UNSIGNED" >> $GITHUB_ENV

      # 9. Generate debug keystore if no production keystore provided
      - name: Generate debug keystore
        if: ${{ !secrets.KEYSTORE_BASE64 }}
        run: |
          keytool -genkey -v \
            -keystore debug.keystore \
            -alias ${DEFAULT_KEYSTORE_ALIAS} \
            -keyalg RSA \
            -keysize 2048 \
            -validity 10000 \
            -storepass ${DEFAULT_KEYSTORE_PASS} \
            -keypass ${DEFAULT_KEY_PASS} \
            -dname "CN=LostMode, OU=Dev, O=LostMode, L=City, ST=State, C=US"

      # 10. Decode production keystore if provided
      - name: Decode production keystore
        if: ${{ secrets.KEYSTORE_BASE64 }}
        run: |
          echo "${{ secrets.KEYSTORE_BASE64 }}" | base64 --decode > keystore.jks

      # 11. Sign APK with apksigner (v2/v3)
      - name: Sign APK
        run: |
          BUILD_TOOLS_DIR="$ANDROID_SDK_ROOT/build-tools/${BUILD_TOOLS}"
          APKSIGNER="$BUILD_TOOLS_DIR/apksigner"
          if [ ! -x "$APKSIGNER" ]; then
            echo "apksigner not found at $APKSIGNER"
            ls -la "$BUILD_TOOLS_DIR"
            exit 1
          fi
          OUT_SIGNED="$GITHUB_WORKSPACE/${OUTPUT_DIR}/app-release-signed.apk"
          "$APKSIGNER" sign --ks debug.keystore \
                            --ks-key-alias ${DEFAULT_KEYSTORE_ALIAS} \
                            --ks-pass pass:${DEFAULT_KEYSTORE_PASS} \
                            --key-pass pass:${DEFAULT_KEY_PASS} \
                            --v1-signing-enabled true \
                            --v2-signing-enabled true \
                            --out "$OUT_SIGNED" \
                            "$APK_UNSIGNED"
          echo "SIGNED_APK_PATH=$OUT_SIGNED" >> $GITHUB_ENV

      # 12. Align APK
      - name: Align APK
        run: |
          ZIPALIGN="$ANDROID_SDK_ROOT/build-tools/${BUILD_TOOLS}/zipalign"
          IN_APK="$GITHUB_WORKSPACE/${OUTPUT_DIR}/app-release-signed.apk"
          OUT_ALIGNED="$GITHUB_WORKSPACE/${OUTPUT_DIR}/app-release-aligned.apk"
          "$ZIPALIGN" -v 4 "$IN_APK" "$OUT_ALIGNED"
          echo "ALIGNED_APK_PATH=$OUT_ALIGNED" >> $GITHUB_ENV

      # 13. Verify APK
      - name: Verify signed APK
        run: |
          APKSIGNER="$ANDROID_SDK_ROOT/build-tools/${BUILD_TOOLS}/apksigner"
          "$APKSIGNER" verify "$GITHUB_WORKSPACE/${OUTPUT_DIR}/app-release-aligned.apk"

      # 14. Upload artifact
      - name: Upload APK
        uses: actions/upload-artifact@v4
        with:
          name: LostModeClient-APK
          path: ${{ github.workspace }}/${{ env.OUTPUT_DIR }}/app-release-aligned.apk
